@startuml Password Reset Flow
skinparam backgroundColor #0e1116
skinparam defaultFontName "Segoe UI"
skinparam defaultFontColor #?black:white
skinparam defaultFontSize 12
skinparam shadowing true

skinparam sequence {
    ArrowColor #00ffaa
    ActorBorderColor #00bfff
    ActorBackgroundColor #1a2432
    ActorFontColor #ffffff
    
    ParticipantBorderColor #00bfff
    ParticipantBackgroundColor #1e232b
    ParticipantFontColor #ffffff
    
    LifeLineBorderColor #00bfff
    LifeLineBackgroundColor #1a2432
    
    BoxBorderColor #00bfff
    BoxBackgroundColor #0d1117
    BoxFontColor #ffffff
}

skinparam sequenceGroup {
  BorderColor white
  BackgroundColor #1a1a1a
  FontColor #ffffff
}

skinparam note {
    BackgroundColor #2d343e
    BorderColor #00ffaa
    FontColor #cdd9e5
}

actor "Job Seeker" as User #003366
participant "Gateway Service" as Gateway #4d4d00
participant "User Service" as UserSvc #004d26
participant "User Repository" as UserRepo #661a1a
participant "MySQL DB" as DB #661a1a
participant "Notification Service" as NotifSvc #004d26
participant "Kafka/RabbitMQ" as Queue #660066
participant "SendGrid" as Email #660066

title Password Reset Flow (Forgot Password → Email → Reset)

== Step 1: Request Password Reset ==

User -> Gateway: POST /api/auth/forgot-password\n{email}
activate Gateway

Gateway -> Gateway: Validate email format
Gateway -> UserSvc: POST /auth/forgot-password\n{email}
activate UserSvc

UserSvc -> UserRepo: findByEmail(email)
activate UserRepo
UserRepo -> DB: SELECT id, email, name, status\nFROM users WHERE email = ?
activate DB

alt User not found
    DB --> UserRepo: null (no user with this email)
    deactivate DB
    UserRepo --> UserSvc: null
    deactivate UserRepo
    
    note over UserSvc
    **Security Note:**
    Return success even if email doesn't exist
    to prevent email enumeration attacks
    end note
    
    UserSvc --> Gateway: 200 OK\n"If email exists, reset link sent"
    deactivate UserSvc
    Gateway --> User: Check your email for reset instructions
    deactivate Gateway
    
else User exists
    DB --> UserRepo: User {id: 123, email, name, status}
    deactivate DB
    UserRepo --> UserSvc: User object
    deactivate UserRepo
    
    == Generate Reset Token ==
    
    UserSvc -> UserSvc: Generate reset token\ntoken = UUID()\nexpiry = NOW() + 1 hour
    
    UserSvc -> UserRepo: savePasswordResetToken(userId, token, expiry)
    activate UserRepo
    UserRepo -> DB: INSERT INTO password_reset_tokens\n(user_id, token, expires_at, created_at)\nVALUES (123, 'abc123xyz', NOW() + 1 HOUR, NOW())
    activate DB
    DB --> UserRepo: Token saved
    deactivate DB
    deactivate UserRepo
    
    == Send Reset Email ==
    
    UserSvc -> NotifSvc: POST /notifications/email/password-reset\n{userId, email, name, resetToken}
    activate NotifSvc
    
    NotifSvc -> Queue: Publish password_reset_event\n{userId, email, resetLink}
    activate Queue
    Queue --> NotifSvc: Event published
    deactivate Queue
    
    NotifSvc --> UserSvc: 202 Accepted (Email queued)
    deactivate NotifSvc
    
    UserSvc --> Gateway: 200 OK\n"If email exists, reset link sent"
    deactivate UserSvc
    
    Gateway --> User: Check your email for reset instructions
    deactivate Gateway
end

== Email Processing (Async) ==

Queue -> NotifSvc: Consume password_reset_event
activate NotifSvc

NotifSvc -> NotifSvc: Load template:\n"password_reset_email.html"
NotifSvc -> NotifSvc: Replace variables:\n{{name}}, {{resetLink}}, {{expiryTime}}

NotifSvc -> Email: POST /v3/mail/send\n{to, subject, html_content}
activate Email
Email --> NotifSvc: 202 Accepted (Email sent)
deactivate Email

NotifSvc -> NotifSvc: Log email event\n(status: SENT, timestamp)
deactivate NotifSvc

note over User
User receives email:
"Reset your password by clicking:
https://careernexus.com/reset-password?token=abc123xyz
Link expires in 1 hour."
end note

== Step 2: Validate Reset Token (User clicks link) ==

User -> Gateway: GET /api/auth/validate-reset-token?token=abc123xyz
activate Gateway

Gateway -> UserSvc: GET /auth/validate-reset-token?token=abc123xyz
activate UserSvc

UserSvc -> UserRepo: findByResetToken(token)
activate UserRepo
UserRepo -> DB: SELECT user_id, expires_at\nFROM password_reset_tokens\nWHERE token = ? AND expires_at > NOW()
activate DB

alt Token valid and not expired
    DB --> UserRepo: {userId: 123, expiresAt: ...}
    deactivate DB
    UserRepo --> UserSvc: Token valid
    deactivate UserRepo
    
    UserSvc --> Gateway: 200 OK\n{valid: true, email: "user@example.com"}
    deactivate UserSvc
    Gateway --> User: Token valid. Enter new password.
    deactivate Gateway
    
else Token invalid or expired
    DB --> UserRepo: null (token not found/expired)
    deactivate DB
    UserRepo --> UserSvc: null
    deactivate UserRepo
    
    UserSvc --> Gateway: 400 Bad Request\n"Invalid or expired reset link"
    deactivate UserSvc
    Gateway --> User: Error: Link expired. Request new reset.
    deactivate Gateway
end

== Step 3: Reset Password ==

User -> Gateway: POST /api/auth/reset-password\n{token, newPassword}
activate Gateway

Gateway -> Gateway: Validate password strength\n(min 8 chars, uppercase, special)
Gateway -> UserSvc: POST /auth/reset-password\n{token, newPassword}
activate UserSvc

UserSvc -> UserRepo: findByResetToken(token)
activate UserRepo
UserRepo -> DB: SELECT user_id, expires_at\nFROM password_reset_tokens\nWHERE token = ? AND expires_at > NOW()
activate DB

alt Token invalid or expired
    DB --> UserRepo: null
    deactivate DB
    UserRepo --> UserSvc: null
    deactivate UserRepo
    UserSvc --> Gateway: 400 Bad Request\n"Invalid or expired token"
    deactivate UserSvc
    Gateway --> User: Error: Reset link expired
    deactivate Gateway
    
else Token valid
    DB --> UserRepo: {userId: 123, expiresAt: ...}
    deactivate DB
    UserRepo --> UserSvc: Token valid (userId: 123)
    deactivate UserRepo
    
    == Update Password ==
    
    UserSvc -> UserSvc: Hash new password (BCrypt)
    
    UserSvc -> UserRepo: updatePassword(userId, newPasswordHash)
    activate UserRepo
    UserRepo -> DB: UPDATE users\nSET password_hash = ?,\n    updated_at = NOW()\nWHERE id = 123
    activate DB
    DB --> UserRepo: Password updated
    deactivate DB
    deactivate UserRepo
    
    UserSvc -> UserRepo: deleteResetToken(token)
    activate UserRepo
    UserRepo -> DB: DELETE FROM password_reset_tokens\nWHERE token = ?
    activate DB
    note right: Token is single-use
    DB --> UserRepo: Token deleted
    deactivate DB
    deactivate UserRepo
    
    == Invalidate All Sessions ==
    
    UserSvc -> UserRepo: invalidateAllUserSessions(userId)
    activate UserRepo
    note right: Force logout from all devices
    UserRepo -> DB: DELETE FROM refresh_tokens WHERE user_id = 123
    activate DB
    DB --> UserRepo: Sessions invalidated
    deactivate DB
    deactivate UserRepo
    
    == Log Security Event ==
    
    UserSvc -> UserRepo: saveSecurityEvent(userId, "PASSWORD_RESET")
    activate UserRepo
    UserRepo -> DB: INSERT INTO audit_logs\n(user_id, action, timestamp, ip_address)\nVALUES (123, 'PASSWORD_RESET', NOW(), '192.168.1.1')
    activate DB
    DB --> UserRepo: Event logged
    deactivate DB
    deactivate UserRepo
    
    == Send Confirmation Email ==
    
    UserSvc -> NotifSvc: POST /notifications/email/password-changed\n{userId, email, timestamp}
    activate NotifSvc
    NotifSvc -> Queue: Publish password_changed_event
    activate Queue
    Queue --> NotifSvc: Event published
    deactivate Queue
    NotifSvc --> UserSvc: 202 Accepted
    deactivate NotifSvc
    
    UserSvc --> Gateway: 200 OK\n"Password reset successful"
    deactivate UserSvc
    
    Gateway --> User: ✓ Password updated successfully!\nPlease login with new password.
    deactivate Gateway
    
    note over User
    User must login again with new password.
    All previous sessions are invalidated.
    end note
end

== Step 4: Change Password (While Logged In) ==

note over User
Alternative flow for logged-in users changing password
via profile settings (no email reset link needed)
end note

User -> Gateway: POST /api/auth/change-password\n{currentPassword, newPassword}
activate Gateway

Gateway -> Gateway: Validate password strength\n(min 8 chars, uppercase, special)
Gateway -> UserSvc: POST /auth/change-password\n{userId, currentPassword, newPassword}\n(Authenticated via JWT)
activate UserSvc

UserSvc -> UserRepo: findById(userId)
activate UserRepo
UserRepo -> DB: SELECT id, password_hash FROM users WHERE id = ?
activate DB
DB --> UserRepo: {id: 123, password_hash: "..."}
deactivate DB
UserRepo --> UserSvc: User object
deactivate UserRepo

alt Current password invalid
    UserSvc --> Gateway: 401 Unauthorized\n"Current password incorrect"
    deactivate UserSvc
    Gateway --> User: Error: Incorrect current password
    deactivate Gateway
else Password verified
    == Update Password ==
    UserSvc -> UserSvc: Hash new password (BCrypt)
    UserSvc -> UserRepo: updatePassword(userId, newPasswordHash)
    activate UserRepo
    UserRepo -> DB: UPDATE users\nSET password_hash = ?,\nupdated_at = NOW()\nWHERE id = 123
    activate DB
    DB --> UserRepo: Password updated
    deactivate DB
    deactivate UserRepo

    == Invalidate All Sessions ==
    UserSvc -> UserRepo: invalidateAllUserSessions(userId)
    activate UserRepo
    note right: Force logout from all devices
    UserRepo -> DB: DELETE FROM refresh_tokens WHERE user_id = 123
    activate DB
    DB --> UserRepo: Sessions invalidated
    deactivate DB
    deactivate UserRepo

    == Log Security Event ==
    UserSvc -> UserRepo: saveSecurityEvent(userId, "PASSWORD_CHANGED")
    activate UserRepo
    UserRepo -> DB: INSERT INTO audit_logs\n(user_id, action, timestamp, ip_address)\nVALUES (123, 'PASSWORD_CHANGED', NOW(), '192.168.1.1')
    activate DB
    DB --> UserRepo: Event logged
    deactivate DB
    deactivate UserRepo

    == Send Confirmation Email ==
    UserSvc -> NotifSvc: POST /notifications/email/password-changed\n{userId, email, timestamp}
    activate NotifSvc
    NotifSvc -> Queue: Publish password_changed_event
    activate Queue
    Queue --> NotifSvc: Event published
    deactivate Queue
    NotifSvc --> UserSvc: 202 Accepted
    deactivate NotifSvc

    UserSvc --> Gateway: 200 OK\n"Password changed successfully"
    deactivate UserSvc
    Gateway --> User: ✓ Password updated successfully!\nPlease login again with new password.
    deactivate Gateway

    note over User
    All active sessions are invalidated.
    User must re-login with new password.
    end note
end

note over User, Email
**Security Measures:**
1. Reset token expires in 1 hour
2. Token is single-use (deleted after reset)
3. Only one active reset token per user
4. All sessions invalidated after password change
5. Confirmation email sent after successful reset
6. Password strength validation enforced
7. No email enumeration (always return success)
8. All events logged in audit_logs table
end note

@enduml